
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d3  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d2  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d8  00000000  00000000  00001109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039b  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000079  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initTimer>:
#define slowDown PORTB &=~(1<<PORTB2);

uint16_t data;

void initTimer (){
TCCR1B |= (1 << CS10) | (1 << CS12); // prescaler to 1024
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 60       	ori	r24, 0x05	; 5
  98:	80 83       	st	Z, r24
TCNT1 = 0;
  9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a2:	08 95       	ret

000000a4 <sleep10MS>:
}

int sleep10MS(int timer){
timer = timer *16; //since the chip is running at 16
  a4:	82 95       	swap	r24
  a6:	92 95       	swap	r25
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	98 27       	eor	r25, r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 27       	eor	r25, r24
TCNT1 = 0;	// setting the counter to 0
  b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
while (TCNT1 <= timer);	//When TCNT1 is equal to 1600 it will show 1 second
  b8:	e4 e8       	ldi	r30, 0x84	; 132
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	20 81       	ld	r18, Z
  be:	31 81       	ldd	r19, Z+1	; 0x01
  c0:	82 17       	cp	r24, r18
  c2:	93 07       	cpc	r25, r19
  c4:	d8 f7       	brcc	.-10     	; 0xbc <sleep10MS+0x18>
return 0;
}
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <clocker>:

void clocker(){
clkUp;
  cc:	29 9a       	sbi	0x05, 1	; 5
sleep10MS(4);
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
clkDown;
  d6:	29 98       	cbi	0x05, 1	; 5
  d8:	08 95       	ret

000000da <readStuff>:


int readStuff()
{

data = (data << 1) | PCINT23;
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	87 60       	ori	r24, 0x07	; 7
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
return (data);
}
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
DDRC = 0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 b9       	out	0x07, r24	; 7
DDRB = 0xFF;
  f6:	84 b9       	out	0x04, r24	; 4
DDRD = 0X00;
  f8:	1a b8       	out	0x0a, r1	; 10

// initialize timer
initTimer();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <initTimer>

// loop forever
while(1)
{
data = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
// running the frequencies at 13 to 1
// having 4ms sleeps 1000/4=25
// just before the last sleep
// case 13 is perfect

slowDown;
 106:	2a 98       	cbi	0x05, 2	; 5
int i = 0;
clocker();
 108:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
clocker();
 10c:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
uint16_t a = readStuff();
 110:	0e 94 6d 00 	call	0xda	; 0xda <readStuff>
clocker();
 114:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
 118:	c9 e0       	ldi	r28, 0x09	; 9
 11a:	d0 e0       	ldi	r29, 0x00	; 0
for ( i=0; i<9; i++)

{
uint16_t a = readStuff();
 11c:	0e 94 6d 00 	call	0xda	; 0xda <readStuff>
clocker();
 120:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
readStuff();
 124:	0e 94 6d 00 	call	0xda	; 0xda <readStuff>
 128:	21 97       	sbiw	r28, 0x01	; 1
int i = 0;
clocker();
clocker();
uint16_t a = readStuff();
clocker();
for ( i=0; i<9; i++)
 12a:	c1 f7       	brne	.-16     	; 0x11c <main+0x2a>
{
uint16_t a = readStuff();
clocker();
readStuff();
}
uint16_t finaldata = readStuff();
 12c:	0e 94 6d 00 	call	0xda	; 0xda <readStuff>
slowUp;
 130:	2a 9a       	sbi	0x05, 2	; 5
sleep10MS(4);
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
}
 13a:	e1 cf       	rjmp	.-62     	; 0xfe <main+0xc>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
