
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083a  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e5  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initTimer>:
uint16_t bit = PIND7;
//data |= (data<<1)&bit;
data = (data&bit); 
//PCINT23;
return (data);
}
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 60       	ori	r24, 0x05	; 5
  98:	80 83       	st	Z, r24
  9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a2:	08 95       	ret

000000a4 <sleep10MS>:
  a4:	82 95       	swap	r24
  a6:	92 95       	swap	r25
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	98 27       	eor	r25, r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 27       	eor	r25, r24
  b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  b8:	e4 e8       	ldi	r30, 0x84	; 132
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	20 81       	ld	r18, Z
  be:	31 81       	ldd	r19, Z+1	; 0x01
  c0:	82 17       	cp	r24, r18
  c2:	93 07       	cpc	r25, r19
  c4:	d8 f7       	brcc	.-10     	; 0xbc <sleep10MS+0x18>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <clocker>:
  cc:	29 9a       	sbi	0x05, 1	; 5
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
  d6:	29 98       	cbi	0x05, 1	; 5
  d8:	08 95       	ret

000000da <readStuff2>:


int readStuff2(){
	int bit; 
	data <<= 1 ;
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(!(PIND & (1<<PORTD7))){
  ee:	29 b1       	in	r18, 0x09	; 9
		bit = 0;
	}
	else{ bit = 1;}
	data |= (bit);
  f0:	02 2e       	mov	r0, r18
  f2:	00 0c       	add	r0, r0
  f4:	33 0b       	sbc	r19, r19
  f6:	22 27       	eor	r18, r18
  f8:	33 0f       	add	r19, r19
  fa:	22 1f       	adc	r18, r18
  fc:	33 27       	eor	r19, r19
  fe:	82 2b       	or	r24, r18
 100:	93 2b       	or	r25, r19
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{
DDRC = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	87 b9       	out	0x07, r24	; 7
DDRB = 0xFF;
 110:	84 b9       	out	0x04, r24	; 4
DDRD = 0X00;
 112:	1a b8       	out	0x0a, r1	; 10

// initialize timer
initTimer();
 114:	0e 94 48 00 	call	0x90	; 0x90 <initTimer>
int finalData = 0;
// loop forever
while(1)
{
data = 0;
 118:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 11c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
// running the frequencies at 13 to 1
// having 4ms sleeps 1000/4=25
// just before the last sleep
// case 13 is perfect

slowDown;
 120:	2a 98       	cbi	0x05, 2	; 5
int i = 0;
clocker();
 122:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
sleep10MS(4);
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
clocker();
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
sleep10MS(4);
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
clocker();
 13a:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
sleep10MS(4);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
 146:	c9 e0       	ldi	r28, 0x09	; 9
 148:	d0 e0       	ldi	r29, 0x00	; 0
for ( i=0; i<9; i++){
clocker();
 14a:	0e 94 66 00 	call	0xcc	; 0xcc <clocker>
readStuff2();
 14e:	0e 94 6d 00 	call	0xda	; 0xda <readStuff2>
sleep10MS(4);
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
 15a:	21 97       	sbiw	r28, 0x01	; 1
sleep10MS(4);
clocker();
sleep10MS(4);
clocker();
sleep10MS(4);
for ( i=0; i<9; i++){
 15c:	b1 f7       	brne	.-20     	; 0x14a <main+0x3e>
clocker();
readStuff2();
sleep10MS(4);
}
finalData = data;
slowUp;
 15e:	2a 9a       	sbi	0x05, 2	; 5
sleep10MS(4);
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 52 00 	call	0xa4	; 0xa4 <sleep10MS>
}
 168:	d7 cf       	rjmp	.-82     	; 0x118 <main+0xc>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
