
UART_Starter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000268  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba6  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086b  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000782  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ee5a  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  00010e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00010fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000001f3  00000000  00000000  0001104a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	78 d0       	rcall	.+240    	; 0x17c <main>
  8c:	eb c0       	rjmp	.+470    	; 0x264 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <uart_getchar>:
	while(uart_getchar()!='\r');
	while(uart_getchar()!='\n');
	
	return 1;
	
}
  90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  94:	88 23       	and	r24, r24
  96:	64 f0       	brlt	.+24     	; 0xb0 <uart_getchar+0x20>
  98:	8a ef       	ldi	r24, 0xFA	; 250
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	90 81       	ld	r25, Z
  a2:	99 23       	and	r25, r25
  a4:	1c f0       	brlt	.+6      	; 0xac <uart_getchar+0x1c>
  a6:	81 11       	cpse	r24, r1
  a8:	fa cf       	rjmp	.-12     	; 0x9e <uart_getchar+0xe>
  aa:	08 95       	ret
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <uart_getchar+0x26>
  b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret

000000ba <init>:
  ba:	e1 e8       	ldi	r30, 0x81	; 129
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	85 60       	ori	r24, 0x05	; 5
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <Wait10ms>:
  c6:	18 16       	cp	r1, r24
  c8:	19 06       	cpc	r1, r25
  ca:	84 f4       	brge	.+32     	; 0xec <Wait10ms+0x26>
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	e4 e8       	ldi	r30, 0x84	; 132
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	11 82       	std	Z+1, r1	; 0x01
  d6:	10 82       	st	Z, r1
  d8:	20 81       	ld	r18, Z
  da:	31 81       	ldd	r19, Z+1	; 0x01
  dc:	2b 31       	cpi	r18, 0x1B	; 27
  de:	36 40       	sbci	r19, 0x06	; 6
  e0:	d8 f3       	brcs	.-10     	; 0xd8 <Wait10ms+0x12>
  e2:	4f 5f       	subi	r20, 0xFF	; 255
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
  e6:	84 17       	cp	r24, r20
  e8:	95 07       	cpc	r25, r21
  ea:	a4 f7       	brge	.-24     	; 0xd4 <Wait10ms+0xe>
  ec:	08 95       	ret

000000ee <checkOk>:
  ee:	d0 df       	rcall	.-96     	; 0x90 <uart_getchar>
  f0:	8f 36       	cpi	r24, 0x6F	; 111
  f2:	e9 f7       	brne	.-6      	; 0xee <checkOk>
  f4:	cd df       	rcall	.-102    	; 0x90 <uart_getchar>
  f6:	8b 36       	cpi	r24, 0x6B	; 107
  f8:	e9 f7       	brne	.-6      	; 0xf4 <checkOk+0x6>
  fa:	ca df       	rcall	.-108    	; 0x90 <uart_getchar>
  fc:	8d 30       	cpi	r24, 0x0D	; 13
  fe:	e9 f7       	brne	.-6      	; 0xfa <checkOk+0xc>
 100:	c7 df       	rcall	.-114    	; 0x90 <uart_getchar>
 102:	8a 30       	cpi	r24, 0x0A	; 10
 104:	e9 f7       	brne	.-6      	; 0x100 <checkOk+0x12>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret

0000010a <checkmctxok>:
 10a:	c2 df       	rcall	.-124    	; 0x90 <uart_getchar>
 10c:	8d 36       	cpi	r24, 0x6D	; 109
 10e:	e9 f7       	brne	.-6      	; 0x10a <checkmctxok>
 110:	bf df       	rcall	.-130    	; 0x90 <uart_getchar>
 112:	81 36       	cpi	r24, 0x61	; 97
 114:	e9 f7       	brne	.-6      	; 0x110 <checkmctxok+0x6>
 116:	bc df       	rcall	.-136    	; 0x90 <uart_getchar>
 118:	83 36       	cpi	r24, 0x63	; 99
 11a:	e9 f7       	brne	.-6      	; 0x116 <checkmctxok+0xc>
 11c:	b9 df       	rcall	.-142    	; 0x90 <uart_getchar>
 11e:	8f 35       	cpi	r24, 0x5F	; 95
 120:	e9 f7       	brne	.-6      	; 0x11c <checkmctxok+0x12>
 122:	b6 df       	rcall	.-148    	; 0x90 <uart_getchar>
 124:	84 37       	cpi	r24, 0x74	; 116
 126:	e9 f7       	brne	.-6      	; 0x122 <checkmctxok+0x18>
 128:	b3 df       	rcall	.-154    	; 0x90 <uart_getchar>
 12a:	88 37       	cpi	r24, 0x78	; 120
 12c:	e9 f7       	brne	.-6      	; 0x128 <checkmctxok+0x1e>
 12e:	b0 df       	rcall	.-160    	; 0x90 <uart_getchar>
 130:	8f 35       	cpi	r24, 0x5F	; 95
 132:	e9 f7       	brne	.-6      	; 0x12e <checkmctxok+0x24>
 134:	ad df       	rcall	.-166    	; 0x90 <uart_getchar>
 136:	8f 36       	cpi	r24, 0x6F	; 111
 138:	e9 f7       	brne	.-6      	; 0x134 <checkmctxok+0x2a>
 13a:	aa df       	rcall	.-172    	; 0x90 <uart_getchar>
 13c:	8b 36       	cpi	r24, 0x6B	; 107
 13e:	e9 f7       	brne	.-6      	; 0x13a <checkmctxok+0x30>
 140:	a7 df       	rcall	.-178    	; 0x90 <uart_getchar>
 142:	8d 30       	cpi	r24, 0x0D	; 13
 144:	e9 f7       	brne	.-6      	; 0x140 <checkmctxok+0x36>
 146:	a4 df       	rcall	.-184    	; 0x90 <uart_getchar>
 148:	8a 30       	cpi	r24, 0x0A	; 10
 14a:	e9 f7       	brne	.-6      	; 0x146 <checkmctxok+0x3c>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	08 95       	ret

00000150 <sendString>:
// this function takes a string and puts out chars until no more characters are available
void sendString(char *s){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	dc 01       	movw	r26, r24
   char *ptr = s;
   while(*ptr)
 156:	2c 91       	ld	r18, X
 158:	22 23       	and	r18, r18
 15a:	69 f0       	breq	.+26     	; 0x176 <sendString+0x26>
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
 15c:	e0 ec       	ldi	r30, 0xC0	; 192
 15e:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
 160:	c6 ec       	ldi	r28, 0xC6	; 198
 162:	d0 e0       	ldi	r29, 0x00	; 0
void sendString(char *s){
   char *ptr = s;
   while(*ptr)
   {
      char ch = (*ptr);
	  	uart_putchar(ch);
 164:	82 2f       	mov	r24, r18
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
 166:	90 81       	ld	r25, Z
 168:	95 ff       	sbrs	r25, 5
 16a:	fd cf       	rjmp	.-6      	; 0x166 <sendString+0x16>
	UDR0 = data;
 16c:	88 83       	st	Y, r24
   char *ptr = s;
   while(*ptr)
   {
      char ch = (*ptr);
	  	uart_putchar(ch);
      (*ptr) = ch;
 16e:	2d 93       	st	X+, r18
	
}
// this function takes a string and puts out chars until no more characters are available
void sendString(char *s){
   char *ptr = s;
   while(*ptr)
 170:	2c 91       	ld	r18, X
 172:	21 11       	cpse	r18, r1
 174:	f7 cf       	rjmp	.-18     	; 0x164 <sendString+0x14>
	  	uart_putchar(ch);
      (*ptr) = ch;
      ++ptr;
   }
	
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <main>:
	
	
	
int main(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	a0 97       	sbiw	r28, 0x20	; 32
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	// Set up baud rate registers
		init();
 190:	94 df       	rcall	.-216    	; 0xba <init>
		Wait10ms(10);
 192:	8a e0       	ldi	r24, 0x0A	; 10
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	97 df       	rcall	.-210    	; 0xc6 <Wait10ms>
{
#if defined UBRR0H
	/* These values are calculated by the setbaud tool based on the values
	defined in conf_clock.h and conf_uart.h. The only thing that the application
	need to do is to load these values into the correct registers.*/
	UBRR0H = UBRRH_VALUE;
 198:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 19c:	82 e2       	ldi	r24, 0x22	; 34
 19e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif

	/* Check if the setbaud tool require that the 2x speed bit has to be set in
	order to reach the specified baudrate. */
#if USE_2X
	UCSR0A |= (1 << U2X0);
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
#endif

	// Enable RX and TX and set up port
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// Set the TX pin as output
	UART_PORT_DDR |= (1 << UART_TX_PIN);
 1b2:	51 9a       	sbi	0x0a, 1	; 10
	// Set the RX pin as input
	UART_PORT_DDR &= ~(1 << UART_RX_PIN);
 1b4:	50 98       	cbi	0x0a, 0	; 10

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		init();
		Wait10ms(10);
	    uart_init();
		
		//Wait10ms(50);
		sendString("mac get status\r\n");
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	c7 df       	rcall	.-114    	; 0x150 <sendString>
		sendString("mac get sync\r\n");
 1c2:	81 e1       	ldi	r24, 0x11	; 17
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	c4 df       	rcall	.-120    	; 0x150 <sendString>
		sendString("mac set appeui 70B3D57ED000EDDB\r\n");
		sendString("mac set deveui 0004A30B001A6546\r\n");	
		sendString("mac set appkey 28E9F75BF2494007752ED4AC31E5760D\r\n");
		sendString("mac save\r\n");
	*/
		Wait10ms(10);
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	90 e0       	ldi	r25, 0x00	; 0
		sendString("mac join otaa\r\n");
 1cc:	7c df       	rcall	.-264    	; 0xc6 <Wait10ms>
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	be df       	rcall	.-132    	; 0x150 <sendString>
		
		while(!checkOk());
 1d4:	8c df       	rcall	.-232    	; 0xee <checkOk>
 1d6:	88 23       	and	r24, r24
 1d8:	e9 f3       	breq	.-6      	; 0x1d4 <main+0x58>
 1da:	3d 98       	cbi	0x07, 5	; 7
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1dc:	40 e1       	ldi	r20, 0x10	; 16
 1de:	be 01       	movw	r22, r28
 1e0:	6f 5f       	subi	r22, 0xFF	; 255
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
			unsigned char buffer[32];
			itoa (adcReading,buffer,16);
			char start[32] = "mac tx uncnf 1 /0";
			char *strcat(char *start,char *buffer);
			
			sendString(*start);			
 1e8:	0a d0       	rcall	.+20     	; 0x1fe <__itoa_ncheck>
 1ea:	8d e6       	ldi	r24, 0x6D	; 109
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	b0 df       	rcall	.-160    	; 0x150 <sendString>
			sendString("\r\n");			
 1f0:	8d e2       	ldi	r24, 0x2D	; 45
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	ad df       	rcall	.-166    	; 0x150 <sendString>
 1f6:	89 df       	rcall	.-238    	; 0x10a <checkmctxok>
			
			while(!checkmctxok());
 1f8:	88 23       	and	r24, r24
 1fa:	e9 f3       	breq	.-6      	; 0x1f6 <main+0x7a>
 1fc:	ef cf       	rjmp	.-34     	; 0x1dc <main+0x60>

000001fe <__itoa_ncheck>:
 1fe:	bb 27       	eor	r27, r27
 200:	4a 30       	cpi	r20, 0x0A	; 10
 202:	31 f4       	brne	.+12     	; 0x210 <__itoa_ncheck+0x12>
 204:	99 23       	and	r25, r25
 206:	22 f4       	brpl	.+8      	; 0x210 <__itoa_ncheck+0x12>
 208:	bd e2       	ldi	r27, 0x2D	; 45
 20a:	90 95       	com	r25
 20c:	81 95       	neg	r24
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	01 c0       	rjmp	.+2      	; 0x214 <__utoa_common>

00000212 <__utoa_ncheck>:
 212:	bb 27       	eor	r27, r27

00000214 <__utoa_common>:
 214:	fb 01       	movw	r30, r22
 216:	55 27       	eor	r21, r21
 218:	aa 27       	eor	r26, r26
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	aa 1f       	adc	r26, r26
 220:	a4 17       	cp	r26, r20
 222:	10 f0       	brcs	.+4      	; 0x228 <__utoa_common+0x14>
 224:	a4 1b       	sub	r26, r20
 226:	83 95       	inc	r24
 228:	50 51       	subi	r21, 0x10	; 16
 22a:	b9 f7       	brne	.-18     	; 0x21a <__utoa_common+0x6>
 22c:	a0 5d       	subi	r26, 0xD0	; 208
 22e:	aa 33       	cpi	r26, 0x3A	; 58
 230:	08 f0       	brcs	.+2      	; 0x234 <__utoa_common+0x20>
 232:	a9 5d       	subi	r26, 0xD9	; 217
 234:	a1 93       	st	Z+, r26
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	79 f7       	brne	.-34     	; 0x218 <__utoa_common+0x4>
 23a:	b1 11       	cpse	r27, r1
 23c:	b1 93       	st	Z+, r27
 23e:	11 92       	st	Z+, r1
 240:	cb 01       	movw	r24, r22
 242:	00 c0       	rjmp	.+0      	; 0x244 <strrev>

00000244 <strrev>:
 244:	dc 01       	movw	r26, r24
 246:	fc 01       	movw	r30, r24
 248:	67 2f       	mov	r22, r23
 24a:	71 91       	ld	r23, Z+
 24c:	77 23       	and	r23, r23
 24e:	e1 f7       	brne	.-8      	; 0x248 <strrev+0x4>
 250:	32 97       	sbiw	r30, 0x02	; 2
 252:	04 c0       	rjmp	.+8      	; 0x25c <strrev+0x18>
 254:	7c 91       	ld	r23, X
 256:	6d 93       	st	X+, r22
 258:	70 83       	st	Z, r23
 25a:	62 91       	ld	r22, -Z
 25c:	ae 17       	cp	r26, r30
 25e:	bf 07       	cpc	r27, r31
 260:	c8 f3       	brcs	.-14     	; 0x254 <strrev+0x10>
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
