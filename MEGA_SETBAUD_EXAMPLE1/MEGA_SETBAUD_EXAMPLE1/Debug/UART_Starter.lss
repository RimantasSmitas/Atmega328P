
UART_Starter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a67  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bb  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000077e  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ee2c  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011f  00000000  00000000  00010bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00010cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000001f3  00000000  00000000  00010d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	72 d0       	rcall	.+228    	; 0x170 <main>
  8c:	9e c0       	rjmp	.+316    	; 0x1ca <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <uart_getchar>:
	while(uart_getchar()!='\r');
	while(uart_getchar()!='\n');
	
	return 1;	
	
}
  90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  94:	88 23       	and	r24, r24
  96:	64 f0       	brlt	.+24     	; 0xb0 <uart_getchar+0x20>
  98:	8a ef       	ldi	r24, 0xFA	; 250
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	90 81       	ld	r25, Z
  a2:	99 23       	and	r25, r25
  a4:	1c f0       	brlt	.+6      	; 0xac <uart_getchar+0x1c>
  a6:	81 11       	cpse	r24, r1
  a8:	fa cf       	rjmp	.-12     	; 0x9e <uart_getchar+0xe>
  aa:	08 95       	ret
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <uart_getchar+0x26>
  b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret

000000ba <init>:
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  c0:	87 e8       	ldi	r24, 0x87	; 135
  c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  c6:	08 95       	ret

000000c8 <readAdc>:
  c8:	85 e4       	ldi	r24, 0x45	; 69
  ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	86 fd       	sbrc	r24, 6
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <readAdc+0x10>
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	08 95       	ret

000000e8 <checkOk>:
  e8:	d3 df       	rcall	.-90     	; 0x90 <uart_getchar>
  ea:	8f 36       	cpi	r24, 0x6F	; 111
  ec:	e9 f7       	brne	.-6      	; 0xe8 <checkOk>
  ee:	d0 df       	rcall	.-96     	; 0x90 <uart_getchar>
  f0:	8b 36       	cpi	r24, 0x6B	; 107
  f2:	e9 f7       	brne	.-6      	; 0xee <checkOk+0x6>
  f4:	cd df       	rcall	.-102    	; 0x90 <uart_getchar>
  f6:	8d 30       	cpi	r24, 0x0D	; 13
  f8:	e9 f7       	brne	.-6      	; 0xf4 <checkOk+0xc>
  fa:	ca df       	rcall	.-108    	; 0x90 <uart_getchar>
  fc:	8a 30       	cpi	r24, 0x0A	; 10
  fe:	e9 f7       	brne	.-6      	; 0xfa <checkOk+0x12>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret

00000104 <checkaccecepted>:
{
	char ch=0;
	char message[100];
	char index=0;

	while(uart_getchar()!='a');
 104:	c5 df       	rcall	.-118    	; 0x90 <uart_getchar>
 106:	81 36       	cpi	r24, 0x61	; 97
 108:	e9 f7       	brne	.-6      	; 0x104 <checkaccecepted>
	while(uart_getchar()!='c');
 10a:	c2 df       	rcall	.-124    	; 0x90 <uart_getchar>
 10c:	83 36       	cpi	r24, 0x63	; 99
 10e:	e9 f7       	brne	.-6      	; 0x10a <checkaccecepted+0x6>
	while(uart_getchar()!='c');
 110:	bf df       	rcall	.-130    	; 0x90 <uart_getchar>
 112:	83 36       	cpi	r24, 0x63	; 99
 114:	e9 f7       	brne	.-6      	; 0x110 <checkaccecepted+0xc>
	while(uart_getchar()!='e');
 116:	bc df       	rcall	.-136    	; 0x90 <uart_getchar>
 118:	85 36       	cpi	r24, 0x65	; 101
 11a:	e9 f7       	brne	.-6      	; 0x116 <checkaccecepted+0x12>
	while(uart_getchar()!='p');
 11c:	b9 df       	rcall	.-142    	; 0x90 <uart_getchar>
 11e:	80 37       	cpi	r24, 0x70	; 112
 120:	e9 f7       	brne	.-6      	; 0x11c <checkaccecepted+0x18>
	while(uart_getchar()!='t');
 122:	b6 df       	rcall	.-148    	; 0x90 <uart_getchar>
 124:	84 37       	cpi	r24, 0x74	; 116
 126:	e9 f7       	brne	.-6      	; 0x122 <checkaccecepted+0x1e>
	while(uart_getchar()!='e');
 128:	b3 df       	rcall	.-154    	; 0x90 <uart_getchar>
 12a:	85 36       	cpi	r24, 0x65	; 101
 12c:	e9 f7       	brne	.-6      	; 0x128 <checkaccecepted+0x24>
	while(uart_getchar()!='d');
 12e:	b0 df       	rcall	.-160    	; 0x90 <uart_getchar>
 130:	84 36       	cpi	r24, 0x64	; 100
 132:	e9 f7       	brne	.-6      	; 0x12e <checkaccecepted+0x2a>
 134:	ad df       	rcall	.-166    	; 0x90 <uart_getchar>
	while(uart_getchar()!='\r');
 136:	8d 30       	cpi	r24, 0x0D	; 13
 138:	e9 f7       	brne	.-6      	; 0x134 <checkaccecepted+0x30>
 13a:	aa df       	rcall	.-172    	; 0x90 <uart_getchar>
 13c:	8a 30       	cpi	r24, 0x0A	; 10
	while(uart_getchar()!='\n');
 13e:	e9 f7       	brne	.-6      	; 0x13a <checkaccecepted+0x36>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret

00000144 <sendString>:
 144:	cf 93       	push	r28
	
	return 1;
	
}
 146:	df 93       	push	r29
 148:	dc 01       	movw	r26, r24
// this function takes a string and puts out chars until no more characters are available
void sendString(char *s){
   char *ptr = s;
   while(*ptr)
 14a:	2c 91       	ld	r18, X
 14c:	22 23       	and	r18, r18
 14e:	69 f0       	breq	.+26     	; 0x16a <sendString+0x26>
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
 154:	c6 ec       	ldi	r28, 0xC6	; 198
 156:	d0 e0       	ldi	r29, 0x00	; 0
void sendString(char *s){
   char *ptr = s;
   while(*ptr)
   {
      char ch = (*ptr);
	  	uart_putchar(ch);
 158:	82 2f       	mov	r24, r18
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
 15a:	90 81       	ld	r25, Z
 15c:	95 ff       	sbrs	r25, 5
 15e:	fd cf       	rjmp	.-6      	; 0x15a <sendString+0x16>
	UDR0 = data;
 160:	88 83       	st	Y, r24
   char *ptr = s;
   while(*ptr)
   {
      char ch = (*ptr);
	  	uart_putchar(ch);
      (*ptr) = ch;
 162:	2d 93       	st	X+, r18
	
}
// this function takes a string and puts out chars until no more characters are available
void sendString(char *s){
   char *ptr = s;
   while(*ptr)
 164:	2c 91       	ld	r18, X
 166:	21 11       	cpse	r18, r1
 168:	f7 cf       	rjmp	.-18     	; 0x158 <sendString+0x14>
	  	uart_putchar(ch);
      (*ptr) = ch;
      ++ptr;
   }
	
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:
	
	
int main(void)
{
	// Set up baud rate registers
		init();
 170:	a4 df       	rcall	.-184    	; 0xba <init>
{
#if defined UBRR0H
	/* These values are calculated by the setbaud tool based on the values
	defined in conf_clock.h and conf_uart.h. The only thing that the application
	need to do is to load these values into the correct registers.*/
	UBRR0H = UBRRH_VALUE;
 172:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 176:	82 e2       	ldi	r24, 0x22	; 34
 178:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif

	/* Check if the setbaud tool require that the 2x speed bit has to be set in
	order to reach the specified baudrate. */
#if USE_2X
	UCSR0A |= (1 << U2X0);
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	82 60       	ori	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
#endif

	// Enable RX and TX and set up port
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// Set the TX pin as output
	UART_PORT_DDR |= (1 << UART_TX_PIN);
 18c:	51 9a       	sbi	0x0a, 1	; 10
	// Set the RX pin as input
	UART_PORT_DDR &= ~(1 << UART_RX_PIN);
 18e:	50 98       	cbi	0x0a, 0	; 10

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		init();
		Wait10ms(10);
	    uart_init();
		
		//Wait10ms(50);
		sendString("mac get status\r\n");
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	d4 df       	rcall	.-88     	; 0x144 <sendString>
		sendString("mac get sync\r\n");
 19c:	81 e1       	ldi	r24, 0x11	; 17
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	d1 df       	rcall	.-94     	; 0x144 <sendString>
		sendString("mac set deveui 0004A30B001A6546\r\n");	
		sendString("mac set appkey 28E9F75BF2494007752ED4AC31E5760D\r\n");
		sendString("mac save\r\n");
	*/
		Wait10ms(10);
		sendString("mac join otaa\r\n");
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	ce df       	rcall	.-100    	; 0x144 <sendString>
		
		while(!checkOk());
 1a8:	9f df       	rcall	.-194    	; 0xe8 <checkOk>
 1aa:	88 23       	and	r24, r24
 1ac:	e9 f3       	breq	.-6      	; 0x1a8 <main+0x38>
		while(!checkaccecepted());
 1ae:	aa df       	rcall	.-172    	; 0x104 <checkaccecepted>
 1b0:	88 23       	and	r24, r24
 1b2:	e9 f3       	breq	.-6      	; 0x1ae <main+0x3e>
		
	//	while(!checkOk());
	//	sendString("mac resume\r\n");
		

		DDRC &= ~(1<<5);
 1b4:	3d 98       	cbi	0x07, 5	; 7
		
		int adcReading = 0;
		while (1)
		{
			adcReading = readAdc();
 1b6:	88 df       	rcall	.-240    	; 0xc8 <readAdc>
 1b8:	c8 2f       	mov	r28, r24
			char c = (char)adcReading;
			char message = ("radio tx %d\r\n",c); 	
			char message2 = ("mac tx uncnf 1 %d\r\n",c);
			
			//sendString("mac get status\r\n");
			sendString("mac tx uncnf 1 100\r\n");			
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	c2 df       	rcall	.-124    	; 0x144 <sendString>
 1c0:	8c 2f       	mov	r24, r28
			
			//while(!checkmctxok());
			sendString(message2);
 1c2:	cc 0f       	add	r28, r28
 1c4:	99 0b       	sbc	r25, r25
 1c6:	be df       	rcall	.-132    	; 0x144 <sendString>
 1c8:	f6 cf       	rjmp	.-20     	; 0x1b6 <main+0x46>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
