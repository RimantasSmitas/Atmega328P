
MEGA_SETBAUD_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075a  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000563  00000000  00000000  00001015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ed63  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  0001031b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000103ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000001e5  00000000  00000000  0001042f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	18 d0       	rcall	.+48     	; 0xbc <main>
  8c:	2c c0       	rjmp	.+88     	; 0xe6 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <sendString>:
 *
 * \note This application assumes that the TX and RX pins have been externally
 * shorted to create a loop back.
 */

void sendString(char *s){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	dc 01       	movw	r26, r24
	char *ptr = s;
   while(*ptr)
  96:	2c 91       	ld	r18, X
  98:	22 23       	and	r18, r18
  9a:	69 f0       	breq	.+26     	; 0xb6 <sendString+0x26>
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
  a0:	c6 ec       	ldi	r28, 0xC6	; 198
  a2:	d0 e0       	ldi	r29, 0x00	; 0
void sendString(char *s){
	char *ptr = s;
   while(*ptr)
   {
      char ch = (*ptr);
	  	uart_putchar(ch);
  a4:	82 2f       	mov	r24, r18
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
  a6:	90 81       	ld	r25, Z
  a8:	95 ff       	sbrs	r25, 5
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <sendString+0x16>
	UDR0 = data;
  ac:	88 83       	st	Y, r24
	char *ptr = s;
   while(*ptr)
   {
      char ch = (*ptr);
	  	uart_putchar(ch);
      (*ptr) = ch;
  ae:	2d 93       	st	X+, r18
 * shorted to create a loop back.
 */

void sendString(char *s){
	char *ptr = s;
   while(*ptr)
  b0:	2c 91       	ld	r18, X
  b2:	21 11       	cpse	r18, r1
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <sendString+0x14>
	  	uart_putchar(ch);
      (*ptr) = ch;
      ++ptr;
  }
	
	}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <main>:
{
#if defined UBRR0H
	/* These values are calculated by the setbaud tool based on the values
	defined in conf_clock.h and conf_uart.h. The only thing that the application
	need to do is to load these values into the correct registers.*/
	UBRR0H = UBRRH_VALUE;
  bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  c0:	87 e6       	ldi	r24, 0x67	; 103
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#if USE_2X
	UCSR0A |= (1 << U2X0);
#endif

	// Enable RX and TX and set up port
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// Set the TX pin as output
	UART_PORT_DDR |= (1 << UART_TX_PIN);
  cc:	51 9a       	sbi	0x0a, 1	; 10
	// Set the RX pin as input
	UART_PORT_DDR &= ~(1 << UART_RX_PIN);
  ce:	50 98       	cbi	0x0a, 0	; 10

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	


int main(void)
{
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	97 e2       	ldi	r25, 0x27	; 39
  da:	01 97       	sbiw	r24, 0x01	; 1
	// Set up baud rate registers
	uart_init();
	while (true){
	// Write a set of letters to the UART
	
	for(int i = 0;i<10000;i++);
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x1e>
	sendString("hello\n\r");
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	d6 df       	rcall	.-84     	; 0x90 <sendString>
	}
  e4:	f8 cf       	rjmp	.-16     	; 0xd6 <main+0x1a>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
