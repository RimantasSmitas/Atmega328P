
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000703  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000671  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fe  00000000  00000000  0000177f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_14>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	8f 00       	.word	0x008f	; ????
  6a:	aa 00       	.word	0x00aa	; ????
  6c:	aa 00       	.word	0x00aa	; ????
  6e:	aa 00       	.word	0x00aa	; ????
  70:	aa 00       	.word	0x00aa	; ????
  72:	93 00       	.word	0x0093	; ????
  74:	aa 00       	.word	0x00aa	; ????
  76:	aa 00       	.word	0x00aa	; ????
  78:	aa 00       	.word	0x00aa	; ????
  7a:	aa 00       	.word	0x00aa	; ????
  7c:	97 00       	.word	0x0097	; ????
  7e:	aa 00       	.word	0x00aa	; ????
  80:	aa 00       	.word	0x00aa	; ????
  82:	aa 00       	.word	0x00aa	; ????
  84:	aa 00       	.word	0x00aa	; ????
  86:	9b 00       	.word	0x009b	; ????
  88:	aa 00       	.word	0x00aa	; ????
  8a:	aa 00       	.word	0x00aa	; ????
  8c:	aa 00       	.word	0x00aa	; ????
  8e:	aa 00       	.word	0x00aa	; ????
  90:	9f 00       	.word	0x009f	; ????
  92:	aa 00       	.word	0x00aa	; ????
  94:	aa 00       	.word	0x00aa	; ????
  96:	aa 00       	.word	0x00aa	; ????
  98:	aa 00       	.word	0x00aa	; ????
  9a:	a3 00       	.word	0x00a3	; ????
  9c:	aa 00       	.word	0x00aa	; ????
  9e:	aa 00       	.word	0x00aa	; ????
  a0:	aa 00       	.word	0x00aa	; ????
  a2:	aa 00       	.word	0x00aa	; ????
  a4:	a7 00       	.word	0x00a7	; ????

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	ee ed       	ldi	r30, 0xDE	; 222
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a2 e0       	ldi	r26, 0x02	; 2
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a4 30       	cpi	r26, 0x04	; 4
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
int time = 0;
int delayint = 250; 

int main(void)
{
	PORTD = 0x00; // Initialize the I/O ports
  e4:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0xFF; // All Output
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xDF; // PIN5 as Input (based on 0-7)
  ea:	8f ed       	ldi	r24, 0xDF	; 223
  ec:	87 b9       	out	0x07, r24	; 7
		
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
  ee:	84 b5       	in	r24, 0x24	; 36
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	84 bd       	out	0x24, r24	; 36

	// Set the value that you want to count to
	OCR0A = 0xF9;
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
  f8:	ee e6       	ldi	r30, 0x6E	; 110
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24

	sei();         //enable interrupts
 102:	78 94       	sei

	TCCR0B |= (1 << CS02);
 104:	85 b5       	in	r24, 0x25	; 37
 106:	84 60       	ori	r24, 0x04	; 4
 108:	85 bd       	out	0x25, r24	; 37
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x26>

0000010c <LedDecider>:
}


int LedDecider(int x)
{
	switch(x) {
 10c:	05 97       	sbiw	r24, 0x05	; 5
 10e:	8f 31       	cpi	r24, 0x1F	; 31
 110:	91 05       	cpc	r25, r1
 112:	00 f5       	brcc	.+64     	; 0x154 <LedDecider+0x48>
 114:	8c 5c       	subi	r24, 0xCC	; 204
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	fc 01       	movw	r30, r24
 11a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__tablejump2__>
		case (5):
			Led0On;
 11e:	40 9a       	sbi	0x08, 0	; 8
			Led2Off;
 120:	42 98       	cbi	0x08, 2	; 8
			Led1Off;
 122:	41 98       	cbi	0x08, 1	; 8
		break;
 124:	08 95       	ret
		case (10):
			Led0Off;
 126:	40 98       	cbi	0x08, 0	; 8
			Led1On;
 128:	41 9a       	sbi	0x08, 1	; 8
			Led2Off
 12a:	42 98       	cbi	0x08, 2	; 8
		break;
 12c:	08 95       	ret
		case (15):
			Led0Off;
 12e:	40 98       	cbi	0x08, 0	; 8
			Led1Off;
 130:	41 98       	cbi	0x08, 1	; 8
			Led2On;
 132:	42 9a       	sbi	0x08, 2	; 8
		break;
 134:	08 95       	ret
		case (20):
			Led0On;
 136:	40 9a       	sbi	0x08, 0	; 8
			Led1On;
 138:	41 9a       	sbi	0x08, 1	; 8
			Led2Off;
 13a:	42 98       	cbi	0x08, 2	; 8
		break;
 13c:	08 95       	ret
		case (25):
			Led0On;
 13e:	40 9a       	sbi	0x08, 0	; 8
			Led1Off;
 140:	41 98       	cbi	0x08, 1	; 8
			Led2On;
 142:	42 9a       	sbi	0x08, 2	; 8
		break;
 144:	08 95       	ret
		case (30):
			Led0Off;
 146:	40 98       	cbi	0x08, 0	; 8
			Led1On;
 148:	41 9a       	sbi	0x08, 1	; 8
			Led2On;
 14a:	42 9a       	sbi	0x08, 2	; 8
		break;
 14c:	08 95       	ret
		case (35):
			Led0On;
 14e:	40 9a       	sbi	0x08, 0	; 8
			Led1On;
 150:	41 9a       	sbi	0x08, 1	; 8
			Led2On;
 152:	42 9a       	sbi	0x08, 2	; 8
		break;
 154:	08 95       	ret

00000156 <__vector_14>:
	}
}


ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt overflow every 4 seconds
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	time +=4; 
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 180:	04 96       	adiw	r24, 0x04	; 4
 182:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (time>delayint){
 18a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 18e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 192:	28 17       	cp	r18, r24
 194:	39 07       	cpc	r19, r25
 196:	24 f4       	brge	.+8      	; 0x1a0 <__vector_14+0x4a>
		time = 0;
 198:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 19c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	LedDecider(time);
 1a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1a8:	0e 94 86 00 	call	0x10c	; 0x10c <LedDecider>
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__tablejump2__>:
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	05 90       	lpm	r0, Z+
 1d4:	f4 91       	lpm	r31, Z
 1d6:	e0 2d       	mov	r30, r0
 1d8:	09 94       	ijmp

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
