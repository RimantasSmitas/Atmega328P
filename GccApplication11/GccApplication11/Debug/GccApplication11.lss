
GccApplication11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000038  00000000  00000000  0000170b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9initTimerv>:
	uint16_t readStuff()
	{
	uint16_t data=0;
	data = (data << 1) | PCINT23;	 
	return (data);	
	}
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	85 60       	ori	r24, 0x05	; 5
  88:	80 83       	st	Z, r24
  8a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  8e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  92:	08 95       	ret

00000094 <_Z9sleep10MSi>:
  94:	82 95       	swap	r24
  96:	92 95       	swap	r25
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	98 27       	eor	r25, r24
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	98 27       	eor	r25, r24
  a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a8:	e4 e8       	ldi	r30, 0x84	; 132
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	20 81       	ld	r18, Z
  ae:	31 81       	ldd	r19, Z+1	; 0x01
  b0:	82 17       	cp	r24, r18
  b2:	93 07       	cpc	r25, r19
  b4:	d8 f7       	brcc	.-10     	; 0xac <_Z9sleep10MSi+0x18>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <_Z7clockerv>:
  bc:	29 9a       	sbi	0x05, 1	; 5
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9sleep10MSi>
  c6:	29 98       	cbi	0x05, 1	; 5
  c8:	08 95       	ret

000000ca <main>:

int main(void)
{
	DDRC = 0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;
  ce:	84 b9       	out	0x04, r24	; 4
	DDRD = 0X00;
  d0:	1a b8       	out	0x0a, r1	; 10
	
	// initialize timer
	initTimer();
  d2:	0e 94 40 00 	call	0x80	; 0x80 <_Z9initTimerv>
		// running the frequencies at 13 to 1
		// having 4ms sleeps 1000/4=25
		// just before the last sleep
		// case 13 is perfect
		
		slowDown;
  d6:	2a 98       	cbi	0x05, 2	; 5
		int i = 0;
		clocker();
  d8:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z7clockerv>
		clocker();
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z7clockerv>
			uint16_t a = readStuff();
		clocker();
  e0:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z7clockerv>
	{
			uint16_t a = readStuff();
			clocker();
		}

			slowUp;
  e4:	2a 9a       	sbi	0x05, 2	; 5
			sleep10MS(4);
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9sleep10MSi>
  ee:	f3 cf       	rjmp	.-26     	; 0xd6 <main+0xc>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
