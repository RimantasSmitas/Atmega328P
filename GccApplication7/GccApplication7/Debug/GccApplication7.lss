
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082a  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000720  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a0  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_14>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	b4 00       	.word	0x00b4	; ????
  6a:	cf 00       	.word	0x00cf	; ????
  6c:	cf 00       	.word	0x00cf	; ????
  6e:	cf 00       	.word	0x00cf	; ????
  70:	cf 00       	.word	0x00cf	; ????
  72:	b8 00       	.word	0x00b8	; ????
  74:	cf 00       	.word	0x00cf	; ????
  76:	cf 00       	.word	0x00cf	; ????
  78:	cf 00       	.word	0x00cf	; ????
  7a:	cf 00       	.word	0x00cf	; ????
  7c:	bc 00       	.word	0x00bc	; ????
  7e:	cf 00       	.word	0x00cf	; ????
  80:	cf 00       	.word	0x00cf	; ????
  82:	cf 00       	.word	0x00cf	; ????
  84:	cf 00       	.word	0x00cf	; ????
  86:	c0 00       	.word	0x00c0	; ????
  88:	cf 00       	.word	0x00cf	; ????
  8a:	cf 00       	.word	0x00cf	; ????
  8c:	cf 00       	.word	0x00cf	; ????
  8e:	cf 00       	.word	0x00cf	; ????
  90:	c4 00       	.word	0x00c4	; ????
  92:	cf 00       	.word	0x00cf	; ????
  94:	cf 00       	.word	0x00cf	; ????
  96:	cf 00       	.word	0x00cf	; ????
  98:	cf 00       	.word	0x00cf	; ????
  9a:	c8 00       	.word	0x00c8	; ????
  9c:	cf 00       	.word	0x00cf	; ????
  9e:	cf 00       	.word	0x00cf	; ????
  a0:	cf 00       	.word	0x00cf	; ????
  a2:	cf 00       	.word	0x00cf	; ????
  a4:	cc 00       	.word	0x00cc	; ????

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	e8 ed       	ldi	r30, 0xD8	; 216
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a0 30       	cpi	r26, 0x00	; 0
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a2 30       	cpi	r26, 0x02	; 2
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  dc:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <timerinit>:
}


void timerinit(){
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	84 bd       	out	0x24, r24	; 36

	// Set the value that you want to count to
	OCR0A = 0xF9;
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
  ee:	ee e6       	ldi	r30, 0x6E	; 110
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24

	sei();         //enable interrupts
  f8:	78 94       	sei

	TCCR0B |= (1 << CS02);
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	85 bd       	out	0x25, r24	; 37
 100:	08 95       	ret

00000102 <__vector_14>:
	// set prescaler to 256 and start the timer
	
}

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt overflow every 4 miliseconds
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	GlobalTimeIn4msIncriments +=4 ;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 118:	04 96       	adiw	r24, 0x04	; 4
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <timer>:


void timer(int delayInMS)
{
	while(delayInMS<GlobalTimeIn4msIncriments)
 130:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 134:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 138:	82 17       	cp	r24, r18
 13a:	93 07       	cpc	r25, r19
 13c:	ec f3       	brlt	.-6      	; 0x138 <timer+0x8>
	{
		int i ;
		i++;
	}
	GlobalTimeIn4msIncriments = 0;
 13e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 146:	08 95       	ret

00000148 <adc_init>:

}

void adc_init(void)
{
	ADMUX = (1<<REFS0);     //select AVCC as reference
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | 8;
 14e:	88 e8       	ldi	r24, 0x88	; 136
 150:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 154:	08 95       	ret

00000156 <LedDecider>:
	LedDecider(ADCW);
}

int LedDecider(int x)
{
switch(x) {
 156:	05 97       	sbiw	r24, 0x05	; 5
 158:	8f 31       	cpi	r24, 0x1F	; 31
 15a:	91 05       	cpc	r25, r1
 15c:	00 f5       	brcc	.+64     	; 0x19e <LedDecider+0x48>
 15e:	8c 5c       	subi	r24, 0xCC	; 204
 160:	9f 4f       	sbci	r25, 0xFF	; 255
 162:	fc 01       	movw	r30, r24
 164:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__tablejump2__>
		case (5):
			Led0On;
 168:	40 9a       	sbi	0x08, 0	; 8
			Led2Off;
 16a:	42 98       	cbi	0x08, 2	; 8
			Led1Off;
 16c:	41 98       	cbi	0x08, 1	; 8
		break;
 16e:	08 95       	ret
		case (10):
			Led0Off;
 170:	40 98       	cbi	0x08, 0	; 8
			Led1On;
 172:	41 9a       	sbi	0x08, 1	; 8
			Led2Off
 174:	42 98       	cbi	0x08, 2	; 8
		break;
 176:	08 95       	ret
		case (15):
			Led0Off;
 178:	40 98       	cbi	0x08, 0	; 8
			Led1Off;
 17a:	41 98       	cbi	0x08, 1	; 8
			Led2On;
 17c:	42 9a       	sbi	0x08, 2	; 8
		break;
 17e:	08 95       	ret
		case (20):
			Led0On;
 180:	40 9a       	sbi	0x08, 0	; 8
			Led1On;
 182:	41 9a       	sbi	0x08, 1	; 8
			Led2Off;
 184:	42 98       	cbi	0x08, 2	; 8
		break;
 186:	08 95       	ret
		case (25):
			Led0On;
 188:	40 9a       	sbi	0x08, 0	; 8
			Led1Off;
 18a:	41 98       	cbi	0x08, 1	; 8
			Led2On;
 18c:	42 9a       	sbi	0x08, 2	; 8
		break;
 18e:	08 95       	ret
		case (30):
			Led0Off;
 190:	40 98       	cbi	0x08, 0	; 8
			Led1On;
 192:	41 9a       	sbi	0x08, 1	; 8
			Led2On;
 194:	42 9a       	sbi	0x08, 2	; 8
		break;
 196:	08 95       	ret
		case (35):
			Led0On;
 198:	40 9a       	sbi	0x08, 0	; 8
			Led1On;
 19a:	41 9a       	sbi	0x08, 1	; 8
			Led2On;
 19c:	42 9a       	sbi	0x08, 2	; 8
		break;
	}
 19e:	08 95       	ret

000001a0 <main>:
int GlobalTimeIn4msIncriments = 0;
int delayint = 100;

int main(void)
{
	PORTD = 0x00; // Initialize the I/O ports
 1a0:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0xFF; // All Output
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xDF; // PIN5 as Input (based on 0-7)
 1a6:	8f ed       	ldi	r24, 0xDF	; 223
 1a8:	87 b9       	out	0x07, r24	; 7
	
	adc_init();
 1aa:	0e 94 a4 00 	call	0x148	; 0x148 <adc_init>
	timerinit();
 1ae:	0e 94 72 00 	call	0xe4	; 0xe4 <timerinit>
	
	int x = 0;
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1)
	{
		LedDecider(x);
 1b6:	ce 01       	movw	r24, r28
 1b8:	0e 94 ab 00 	call	0x156	; 0x156 <LedDecider>
		timer(25);
 1bc:	89 e1       	ldi	r24, 0x19	; 25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 98 00 	call	0x130	; 0x130 <timer>
		x +=5;
 1c4:	25 96       	adiw	r28, 0x05	; 5
 1c6:	f7 cf       	rjmp	.-18     	; 0x1b6 <main+0x16>

000001c8 <__tablejump2__>:
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	05 90       	lpm	r0, Z+
 1ce:	f4 91       	lpm	r31, Z
 1d0:	e0 2d       	mov	r30, r0
 1d2:	09 94       	ijmp

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
