
GccApplication17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000700  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ff  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bf  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 93 00 	call	0x126	; 0x126 <main>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
#define DHT11_PIN 6
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void init(){
	
TCCR1B |= (1 << CS12)| (0 << CS11) | (1 << CS10); // enabling the prescale to 1024
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 60       	ori	r24, 0x05	; 5
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <Wait10ms>:


void Wait10ms(int y)

{	int x;
	for(x = 1; x <= y; x++){
  9c:	18 16       	cp	r1, r24
  9e:	19 06       	cpc	r1, r25
  a0:	84 f4       	brge	.+32     	; 0xc2 <Wait10ms+0x26>
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	50 e0       	ldi	r21, 0x00	; 0
		TCNT1 = 0; //set the timer to value 0
  a6:	e4 e8       	ldi	r30, 0x84	; 132
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	11 82       	std	Z+1, r1	; 0x01
  ac:	10 82       	st	Z, r1
		while (TCNT1 <= 1562); // while loop that counts to 1562 which is equal to 1s
  ae:	20 81       	ld	r18, Z
  b0:	31 81       	ldd	r19, Z+1	; 0x01
  b2:	2b 31       	cpi	r18, 0x1B	; 27
  b4:	36 40       	sbci	r19, 0x06	; 6
  b6:	d8 f3       	brcs	.-10     	; 0xae <Wait10ms+0x12>


void Wait10ms(int y)

{	int x;
	for(x = 1; x <= y; x++){
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	84 17       	cp	r24, r20
  be:	95 07       	cpc	r25, r21
  c0:	a4 f7       	brge	.-24     	; 0xaa <Wait10ms+0xe>
  c2:	08 95       	ret

000000c4 <Request>:
}


void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
  c4:	56 9a       	sbi	0x0a, 6	; 10
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
  c6:	5e 98       	cbi	0x0b, 6	; 11
	Wait10ms(2);				/* wait for 20ms */
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4e 00 	call	0x9c	; 0x9c <Wait10ms>
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
  d0:	5e 9a       	sbi	0x0b, 6	; 11
  d2:	08 95       	ret

000000d4 <Response>:
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
  d4:	56 98       	cbi	0x0a, 6	; 10
	while(PIND & (1<<DHT11_PIN));
  d6:	4e 99       	sbic	0x09, 6	; 9
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
  da:	4e 9b       	sbis	0x09, 6	; 9
  dc:	fe cf       	rjmp	.-4      	; 0xda <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
  de:	4e 99       	sbic	0x09, 6	; 9
  e0:	fe cf       	rjmp	.-4      	; 0xde <Response+0xa>
}
  e2:	08 95       	ret

000000e4 <Receive_data>:

uint8_t Receive_data()			/* receive data */
{	
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	c8 e0       	ldi	r28, 0x08	; 8
  ea:	d0 e0       	ldi	r29, 0x00	; 0
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
  ec:	4e 9b       	sbis	0x09, 6	; 9
  ee:	fe cf       	rjmp	.-4      	; 0xec <Receive_data+0x8>
		Wait10ms(3);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 4e 00 	call	0x9c	; 0x9c <Wait10ms>
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
  f8:	4e 9b       	sbis	0x09, 6	; 9
  fa:	07 c0       	rjmp	.+14     	; 0x10a <Receive_data+0x26>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	88 0f       	add	r24, r24
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 108:	05 c0       	rjmp	.+10     	; 0x114 <Receive_data+0x30>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	88 0f       	add	r24, r24
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		while(PIND & (1<<DHT11_PIN));
 114:	4e 99       	sbic	0x09, 6	; 9
 116:	fe cf       	rjmp	.-4      	; 0x114 <Receive_data+0x30>
 118:	21 97       	sbiw	r28, 0x01	; 1
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
 11a:	41 f7       	brne	.-48     	; 0xec <Receive_data+0x8>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <main>:

int main(void)
{	init();
 126:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
    while(1)
	
	{
	
		Request();		/* send start pulse */
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <Request>
		Response();		/* receive response */
 12e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 132:	0e 94 72 00 	call	0xe4	; 0xe4 <Receive_data>
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 13a:	0e 94 72 00 	call	0xe4	; 0xe4 <Receive_data>
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 142:	0e 94 72 00 	call	0xe4	; 0xe4 <Receive_data>
 146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 14a:	0e 94 72 00 	call	0xe4	; 0xe4 <Receive_data>
 14e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 152:	0e 94 72 00 	call	0xe4	; 0xe4 <Receive_data>
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <CheckSum>
		else
		{	
			
		}
				
	Wait10ms(1);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 4e 00 	call	0x9c	; 0x9c <Wait10ms>
 162:	e3 cf       	rjmp	.-58     	; 0x12a <main+0x4>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
