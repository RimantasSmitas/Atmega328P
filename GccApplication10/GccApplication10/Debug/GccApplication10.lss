
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076e  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a5  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000236  00000000  00000000  00001017  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8e:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z9inittimerv>:



void inittimer (){

TCCR1B |= (1 << CS10) | (1 << CS12); // prescaler to 1024
  96:	e1 e8       	ldi	r30, 0x81	; 129
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	85 60       	ori	r24, 0x05	; 5
  9e:	80 83       	st	Z, r24
TCNT1 = 0;
  a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a8:	08 95       	ret

000000aa <_Z10sleeper1msi>:
}


int sleeper1ms(int timer){
timer = timer *16; 
TCNT1 = 0;	// setting the counter to 0
  aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
while (TCNT1 <= 1600);	//When TCNT1 is equal to 1600 it will show 1 second
  b2:	e4 e8       	ldi	r30, 0x84	; 132
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	91 81       	ldd	r25, Z+1	; 0x01
  ba:	81 34       	cpi	r24, 0x41	; 65
  bc:	96 40       	sbci	r25, 0x06	; 6
  be:	d8 f3       	brcs	.-10     	; 0xb6 <_Z10sleeper1msi+0xc>
return 0;

}
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <main>:


int main(void)
{
	DDRC = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 b9       	out	0x07, r24	; 7
	DDRD = 0X00;
  ca:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
  cc:	84 b9       	out	0x04, r24	; 4

	// initialize timer
	inittimer();
  ce:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9inittimerv>

}


int main(void)
{
  d2:	c3 e1       	ldi	r28, 0x13	; 19
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	// loop forever
	while(1)
	{
	int i; 
	for(i=1;i<20;i++)
	{clkUp;
  d6:	29 9a       	sbi	0x05, 1	; 5
	sleeper1ms(10);
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <_Z10sleeper1msi>
	clkDown;
  e0:	29 98       	cbi	0x05, 1	; 5
	sleeper1ms(10);
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 55 00 	call	0xaa	; 0xaa <_Z10sleeper1msi>
  ea:	21 97       	sbiw	r28, 0x01	; 1
	
	// loop forever
	while(1)
	{
	int i; 
	for(i=1;i<20;i++)
  ec:	a1 f7       	brne	.-24     	; 0xd6 <main+0x10>
	{clkUp;
	sleeper1ms(10);
	clkDown;
	sleeper1ms(10);
		}
		slowUp;
  ee:	2a 9a       	sbi	0x05, 2	; 5
		sleeper1ms(10);
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <_Z10sleeper1msi>
		slowDown;
  f8:	2a 98       	cbi	0x05, 2	; 5
		sleeper1ms(10);
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 55 00 	call	0xaa	; 0xaa <_Z10sleeper1msi>
	// initialize timer
	inittimer();
	
	
	// loop forever
	while(1)
 102:	e7 cf       	rjmp	.-50     	; 0xd2 <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
