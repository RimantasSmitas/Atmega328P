
BlinkLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000794  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b2  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013a  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  78:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_16>:
// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows


ISR(TIMER0_OVF_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
	// keep a track of number of overflows
	PORTC ^= 0b00000100;
  8e:	98 b1       	in	r25, 0x08	; 8
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	89 27       	eor	r24, r25
  94:	88 b9       	out	0x08, r24	; 8
	
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <timer0_init>:

void timer0_init()
{
	TIMSK0=(1<<TOIE0) | (1<<TOIE1);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    // set timer0 counter initial value to 0
    TCNT0=0x00;
  aa:	16 bc       	out	0x26, r1	; 38
    // start timer0 with /1024 prescaler
    TCCR0B = (1<<CS02) | (1<<CS00);
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	85 bd       	out	0x25, r24	; 37
  b0:	08 95       	ret

000000b2 <leder>:
}



void leder(){
	PORTC ^= 0b00000010;
  b2:	98 b1       	in	r25, 0x08	; 8
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	89 27       	eor	r24, r25
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	08 95       	ret

000000bc <__vector_1>:
	}
	
ISR(INT0_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	leder();
  de:	0e 94 59 00 	call	0xb2	; 0xb2 <leder>
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	7f 91       	pop	r23
  f0:	6f 91       	pop	r22
  f2:	5f 91       	pop	r21
  f4:	4f 91       	pop	r20
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <inittimer>:

void inittimer (){
	TCCR1B |= (1 << CS10) | (1 << CS12); // prescaler to 1024
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	85 60       	ori	r24, 0x05	; 5
 10c:	80 83       	st	Z, r24
	TCNT1 = 0;
 10e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 112:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 116:	08 95       	ret

00000118 <timer10ms>:
}

int timer10ms(int tenMs){
	
	TCNT1 = 0;	// setting the counter to 0
 118:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	while (TCNT1 <= tenMs);	//When TCNT1 is equal to 1600 it will show 1 second
 120:	e4 e8       	ldi	r30, 0x84	; 132
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	20 81       	ld	r18, Z
 126:	31 81       	ldd	r19, Z+1	; 0x01
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	d8 f7       	brcc	.-10     	; 0x124 <timer10ms+0xc>
	return 0;
}
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret

00000134 <blinker>:

void blinker(){
		Led0On;
 134:	40 9a       	sbi	0x08, 0	; 8
		timer10ms(16000);
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	9e e3       	ldi	r25, 0x3E	; 62
 13a:	0e 94 8c 00 	call	0x118	; 0x118 <timer10ms>
		Led0Off;
 13e:	40 98       	cbi	0x08, 0	; 8
		timer10ms(16000);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	9e e3       	ldi	r25, 0x3E	; 62
 144:	0e 94 8c 00 	call	0x118	; 0x118 <timer10ms>
 148:	08 95       	ret

0000014a <main>:
}

int main(void)
{
	
	DDRD = 0x00; // All Output
 14a:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	87 b9       	out	0x07, r24	; 7
	PORTD |= (1 << PORTD2); 
 150:	5a 9a       	sbi	0x0b, 2	; 11
	inittimer();
 152:	0e 94 82 00 	call	0x104	; 0x104 <inittimer>
	timer0_init();
 156:	0e 94 52 00 	call	0xa4	; 0xa4 <timer0_init>
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
 15a:	e9 e6       	ldi	r30, 0x69	; 105
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
 164:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000011;
 166:	80 81       	ld	r24, Z
 168:	83 60       	ori	r24, 0x03	; 3
 16a:	80 83       	st	Z, r24
	sei();
 16c:	78 94       	sei

    /* Replace with your application code */
    while (1) 
    {
			blinker();	
 16e:	0e 94 9a 00 	call	0x134	; 0x134 <blinker>
 172:	fd cf       	rjmp	.-6      	; 0x16e <main+0x24>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
